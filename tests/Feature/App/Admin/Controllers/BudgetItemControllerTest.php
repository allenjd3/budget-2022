<?php

namespace Tests\Feature\App\Admin\Controllers;

use Budget\Models\BudgetCategory;
use Budget\Models\BudgetItem;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class BudgetItemControllerTest extends TestCase
{
    use RefreshDatabase;

    public BudgetCategory $category;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->category = BudgetCategory::factory()->create();
    }

    /** @test * */
    public function an_unauthenticated_user_is_redirected_to_login()
    {
        $this->get(route('budget-item.create', $this->category))
            ->assertRedirect(route('login'));
    }

    /** @test * */
    public function a_user_can_create_a_new_budget_item()
    {
        $item = [
            'name' => 'My Amazing Budget Item',
            'planned_amount' => 20,
        ];

        $this->actingAs($this->category->month->user)->post(route('budget-item.store', $this->category), $item)
            ->assertRedirect();

        $this->assertDatabaseHas('budget_items', array_merge($item, ['planned_amount' => 2000]));
    }

    /** @test * */
    public function a_user_can_update_their_own_budget_item()
    {
        $item = BudgetItem::factory()->create();

        $this->actingAs($item->category->month->user)->patch(route('budget-item.update', $item), [
            'name' => 'Replacement Name',
            'planned_amount' => 2300,
        ])
            ->assertRedirect();
        $this->assertDatabaseHas('budget_items', [
            'name' => 'Replacement Name',
        ]);
    }
}
